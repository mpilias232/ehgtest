{"version":3,"sources":["components/imageGen/imageGen.js","components/slider/index.js","components/SortButton/sortButton.js","App.js","reportWebVitals.js","index.js"],"names":["createCanvas","require","drawCanvas","colors","canvas","ctx","getContext","imgData","createImageData","i","data","length","cPos","putImageData","toDataURL","ImageGen","props","palette","params","Array","steps","fill","map","_","shift","alpha","forEach","r","g","b","push","sort","reducer","a","reduce","width","height","src","useStyles","makeStyles","root","valuetext","value","MySlider","classes","className","Typography","id","gutterBottom","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","onChange","event","theme","button","margin","spacing","SortButton","Button","variant","color","startIcon","onClick","App","onSliderChange","setState","val","onButtonClick","sorting","state","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a014dd6.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\nconst { createCanvas } = require('canvas');\n/**\n * To not impact browser performance at all\n * I am using the node implementation of canvas,\n * doing all the rendering server side and\n * returning a base64 string to render within\n * an <img/> element\n */\nfunction drawCanvas(colors) {\n  const width = 256;\n  const height = 128;\n  const canvas = createCanvas(width, height);\n  const ctx = canvas.getContext('2d');\n\n  const imgData = ctx.createImageData(width, height);\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const cPos = i / 4;\n    imgData.data[i] = colors[cPos][0];\n    imgData.data[i + 1] = colors[cPos][1];\n    imgData.data[i + 2] = colors[cPos][2];\n    imgData.data[i + 3] = colors[cPos][3];\n  }\n  ctx.putImageData(imgData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\nconst ImageGen =  (props) => {\n\n\n  const palette = [];\n  const steps = 32;\n  const increment = 8;\n  const params = new Array(steps + 1).fill().map((_, i) => i * increment);\n  // remove 0 column color so the resulting loop returns 32,768 colors\n  params.shift();\n\n  /**\n   * This was my first attempt at building out the color array I would use to build the image.\n   * Nesting loops is usually something to avoid so I wanted to see how well it performed.\n   * Using the performance module it takes usually ~4ms.\n   * Since it's still fast and is easy to read and reason about I decided to stick with it.\n   */\n\n  const alpha = props.alpha || 255;\n  params.forEach(r => {\n    params.forEach(g => {\n      params.forEach(b => {\n        /**\n         * One thing to note, the top value here is 256 which is above the 255 limit\n         * for an rgb color value. Anything over 255 is treated as 255 when rendered\n         * in canvas or the browser, so while this works there could be a case to check\n         * and clamp >=256 down to 255.\n         *\n         * Adding alpha value here to match up with canvas pixel data: (r,g,b,a).\n         */\n        palette.push([r, g, b, alpha]);\n      });\n    });\n  });\n\n\n  /**\n   * Sort by total value of all three color components\n   * Results in a dark to light fade effect while ignoring\n   * the color itself.\n   */\n  if (props.sort === true) {\n\n    const reducer = (a, b) => a + b\n    palette.sort((a, b) => a.reduce(reducer) -  b.reduce(reducer));\n\n  }\ndebugger\n  return (\n   \n    <img width=\"512\" height=\"256\" src={drawCanvas(palette)} />\n  );\n};\n\n\nexport default ImageGen","import { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n    root: {\n      width: 512,\n    },\n  });\n  \n  function valuetext(value) {\n    return `${value}`;\n  }\n\n\n\n\nconst MySlider = props => {\n\n\n\n    const classes = useStyles();\n\n    return (\n      <div className={classes.root}>\n        <Typography id=\"discrete-slider\" gutterBottom>\n          Alpha\n        </Typography>\n        <Slider\n          defaultValue={120}\n          getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={10}\n          marks\n          min={0}\n          max={255}\n          onChange={(event, value)=>props.onChange(value)}\n        />\n\n      </div>\n    );\n};\n\nexport default MySlider;","import Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SortIcon from '@material-ui/icons/Sort';\n\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst SortButton = (props)=>{\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color={props.value ? \"primary\" : 'secondary' }\n        className={classes.button}\n        startIcon={<SortIcon />}\n        onClick={()=>props.onClick()}\n      >\n        Sorting\n      </Button>\n      \n    </div>\n  );\n}\n\nexport default SortButton","import React from \"react\";\nimport './App.css';\nimport ImageGen from \"./components/imageGen/imageGen\";\nimport MySlider from './components/slider';\nimport SortButton from './components/SortButton/sortButton'\n\n\nclass App extends React.Component{\n  constructor(props){\n  super(props);\n\n     this.state = {\n           val: 120,\n           sorting:true\n     }\n\n   } \nonSliderChange=(value) => {\n   this.setState({val: value});\n}\n\nonButtonClick = () =>{\n  this.setState({sorting: !this.state.sorting})\n}\n\n\nrender() {\n  return(\n    <div className=\"App\">\n    <header className=\"App-header\">\n    <MySlider onChange={this.onSliderChange} />\n    <ImageGen alpha={this.state.val} sort={this.state.sorting}/>\n    <SortButton onClick={this.onButtonClick} value={this.state.sorting}/>\n    </header>\n  </div>\n  \n  )\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}